import streamlit as st
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import pickle
from PIL import Image

st.title("""
#  –ö–õ–ê–°–ò–§–Ü–ö–ê–¶–Ü–Ø Fashion MNIST.
–¶–µ–π –≤–µ–±–¥–æ–¥–∞—Ç–æ–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î —Ä–æ–±–æ—Ç—É –¥–≤–æ—Ö –Ω–µ–π—Ä–æ–Ω–Ω–∏—Ö –º–µ—Ä–µ–∂ –¥–ª—è –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω—å —ñ–∑ –Ω–∞–±–æ—Ä—É **Fashion MNIST**:
-  –ó–≥–æ—Ä—Ç–∫–æ–≤–∞ –Ω–µ–π—Ä–æ–Ω–Ω–∞ –º–µ—Ä–µ–∂–∞ (CNN)
-  –ú–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ **VGG16**

–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤–ª–∞—Å–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ–¥—è–≥—É –π –ø–æ–¥–∏–≤—ñ—Ç—å—Å—è, —è–∫–∏–π –∫–ª–∞—Å –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–¥–±–∞—á–∏—Ç—å üëá
""")

# –í–∏–±—ñ—Ä –º–æ–¥–µ–ª—ñ
model_choice = st.radio( "–û–ë–ï–†–ò–¢–¨ –ú–û–î–ï–õ–¨:", ("–ó–≥–æ—Ä—Ç–∫–æ–≤–∞ –Ω–µ–π—Ä–æ–Ω–Ω–∞ –º–µ—Ä–µ–∂–∞ (CNN)", "VGG16") )


if model_choice == "–ó–≥–æ—Ä—Ç–∫–æ–≤–∞ –Ω–µ–π—Ä–æ–Ω–Ω–∞ –º–µ—Ä–µ–∂–∞ (CNN)":
    model_path = "cnn_model.h5"
    history_path = "cnn_history.pkl"
else:
    model_path = "vgg_model.h5"
    history_path = "vgg_history.pkl"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ 
@st.cache_resource
def load_model(path):
    return tf.keras.models.load_model(path)

model = load_model(model_path)

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó ---
with open(history_path, 'rb') as f:
    history = pickle.load(f)

# –ö–ª–∞—Å–∏ Fashion MNIST 
class_names = [
    "T-shirt/top", "Trouser", "Pullover", "Dress", "Coat",
    "Sandal", "Shirt", "Sneaker", "Bag", "Ankle boot"
]
# –ì—Ä–∞—Ñ—ñ–∫–∏ –Ω–∞–≤—á–∞–Ω–Ω—è 
st.subheader(f"üìà –ì—Ä–∞—Ñ—ñ–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç—ñ —Ç–∞ –≤—Ç—Ä–∞—Ç- {model_choice}")
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4))
ax1.plot(history['accuracy'], label='Train Accuracy')
ax1.plot(history['val_accuracy'], label='Val Accuracy')
ax1.legend()
ax1.set_title('–¢–æ—á–Ω—ñ—Å—Ç—å')

ax2.plot(history['loss'], label='Train Loss')
ax2.plot(history['val_loss'], label='Val Loss')
ax2.legend()
ax2.set_title('–§—É–Ω–∫—Ü—ñ—è –≤—Ç—Ä–∞—Ç')
st.pyplot(fig)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è 
st.subheader("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (28x28, —á/–±)")
uploaded_file = st.file_uploader("–û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª...", type=["png", "jpg", "jpeg"])

if uploaded_file is not None:
    image = Image.open(uploaded_file).convert("L")  # grayscale
    st.image(image, caption="–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è", use_column_width=False, width=200)

    if model_choice == "–ó–≥–æ—Ä—Ç–∫–æ–≤–∞ –Ω–µ–π—Ä–æ–Ω–Ω–∞ –º–µ—Ä–µ–∂–∞ (CNN)":
        #  –ü–æ–ø–µ—Ä–µ–¥–Ω—è –æ–±—Ä–æ–±–∫–∞ –¥–ª—è CNN 
        img_resized = image.resize((28, 28))
        img_array = np.array(img_resized) / 255.0
        img_array = np.expand_dims(img_array, axis=(0, -1))  # (1, 28, 28, 1)
    else:
        # –ü–æ–ø–µ—Ä–µ–¥–Ω—è –æ–±—Ä–æ–±–∫–∞ –¥–ª—è VGG16 
        img_rgb = image.convert("RGB")  # —Ä–æ–±–∏–º–æ 3 –∫–∞–Ω–∞–ª–∏
        img_resized = img_rgb.resize((96, 96))  # —è–∫ —É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—ñ
        img_array = np.array(img_resized) / 255.0
        img_array = np.expand_dims(img_array, axis=0)  # (1, 96, 96, 3)

    # –ü–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è
    preds = model.predict(img_array)
    predicted_class = np.argmax(preds)
    confidence = np.max(preds)

    st.markdown(f"### ‚úÖ –ü–µ—Ä–µ–¥–±–∞—á–µ–Ω–∏–π –∫–ª–∞—Å: **{class_names[predicted_class]}**")
    st.markdown(f"–í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ: **{confidence*100:.2f}%**")

    st.bar_chart(dict(zip(class_names, preds[0])))
